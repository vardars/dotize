{"version":3,"file":"dotize.module.mjs","sources":["../src/dotize.js"],"sourcesContent":["// Convert complex js object to dot notation js object\n// url: https://github.com/vardars/dotize\n// author: vardars\n\nconst dotize = {\n    valTypes: {\n        none: \"NONE\",\n        primitive: \"PRIM\",\n        object: \"OBJECT\",\n        array: \"ARRAY\",\n    },\n\n    getValType: function (val) {\n        if ((!val || typeof val != \"object\") && !Array.isArray(val))\n            return dotize.valTypes.primitive;\n        if (Array.isArray(val))\n            return dotize.valTypes.array;\n        if (typeof val == \"object\")\n            return dotize.valTypes.object;\n    },\n\n    getPathType: function (arrPath) {\n        var arrPathTypes = [];\n        for (var path in arrPath) {\n            var pathVal = arrPath[path];\n            if (!pathVal)\n                arrPathTypes.push(dotize.valTypes.none);\n            else if (dotize.isNumber(pathVal))\n                arrPathTypes.push(dotize.valTypes.array);\n            else\n                arrPathTypes.push(dotize.valTypes.object);\n        }\n        return arrPathTypes;\n    },\n\n    isUndefined: function (obj) {\n        return typeof obj == \"undefined\";\n    },\n\n    isNumber: function (f) {\n        return !isNaN(parseInt(f));\n    },\n\n    isEmptyObj: function (obj) {\n        for (var prop in obj) {\n            if (Object.hasOwnProperty.call(obj, prop))\n                return false;\n        }\n\n        return JSON.stringify(obj) === JSON.stringify({});\n    },\n\n    isNotObject: function (obj) {\n        return !obj || typeof obj != \"object\";\n    },\n\n    isEmptyArray: function (arr) {\n        return Array.isArray(arr) && arr.length == 0;\n    },\n\n    isNotArray: function (arr) {\n        return Array.isArray(arr) == false;\n    },\n\n    removeEmptyArrayItem: function (arr) {\n        return arr.filter(function (el) {\n            return el != null && el != \"\";\n        });\n    },\n\n    getFieldName: function (field, prefix, isRoot, isArrayItem, isArray) {\n        if (isArray)\n            return (prefix ? prefix : \"\") + (dotize.isNumber(field) ? \"[\" + field + \"]\" : (isRoot && !prefix ? \"\" : \".\") + field);\n        else if (isArrayItem)\n            return (prefix ? prefix : \"\") + \"[\" + field + \"]\";\n        else\n            return (prefix ? prefix + \".\" : \"\") + field;\n    },\n\n    startsWith: function (val, valToSearch) {\n        return val.indexOf(valToSearch) == 0;\n    },\n\n    convert: function (obj, prefix) {\n        var newObj = {};\n\n        // primitives\n        if (dotize.isNotObject(obj) && dotize.isNotArray(obj)) {\n            if (prefix) {\n                newObj[prefix] = obj;\n                return newObj;\n            } else {\n                return obj;\n            }\n        } else if (dotize.isEmptyArray(obj)) {\n            return obj;\n        }\n\n        return function recurse(o, p, isRoot) {\n            var isArrayItem = Array.isArray(o);\n            for (var f in o) {\n                var currentProp = o[f];\n                if (currentProp && typeof currentProp === \"object\") {\n                    if (Array.isArray(currentProp)) {\n                        if (dotize.isEmptyArray(currentProp)) {\n                            newObj[dotize.getFieldName(f, p, isRoot, false, true)] = currentProp;\n                        } else {\n                            newObj = recurse(currentProp, dotize.getFieldName(f, p, isRoot, false, true), isArrayItem); // array\n                        }\n                    } else {\n                        if (isArrayItem && dotize.isEmptyObj(currentProp) == false) {\n                            newObj = recurse(currentProp, dotize.getFieldName(f, p, isRoot, true)); // array item object\n                        } else if (dotize.isEmptyObj(currentProp) == false) {\n                            newObj = recurse(currentProp, dotize.getFieldName(f, p, isRoot)); // object\n                        } else if (dotize.isEmptyObj(currentProp)) {\n                            newObj[dotize.getFieldName(f, p, isRoot, isArrayItem)] = currentProp;\n                        }\n                    }\n                } else {\n                    if (isArrayItem || dotize.isNumber(f)) {\n                        newObj[dotize.getFieldName(f, p, isRoot, true)] = currentProp; // array item primitive\n                    } else {\n                        newObj[dotize.getFieldName(f, p, isRoot)] = currentProp; // primitive\n                    }\n                }\n            }\n\n            return newObj;\n        }(obj, prefix, true);\n    },\n\n    backward: function (obj, prefix) {\n        var newObj = {};\n        var arStartRegex = /\\[(\\d+)\\]/g;\n\n        // primitives\n        if (dotize.isNotObject(obj) && dotize.isNotArray(obj)) {\n            if (prefix) {\n                return obj[prefix];\n            } else {\n                return obj;\n            }\n        } else if (dotize.isEmptyArray(obj)) {\n            return obj;\n        }\n\n        for (var tProp in obj) {\n            var tPropVal = obj[tProp];\n\n            if (prefix) {\n                var prefixRegex = new RegExp(\"^\" + prefix);\n                tProp = tProp.replace(prefixRegex, \"\");\n            }\n\n            tProp = tProp.replace(arStartRegex, \".$1\");\n\n            if (dotize.startsWith(tProp, \".\"))\n                tProp = tProp.replace(/^\\./, \"\");\n\n            var arrPath = tProp.split(\".\");\n            var arrPathTypes = dotize.getPathType(arrPath);\n\n            // has array on root\n            if (!dotize.isUndefined(arrPathTypes) &&\n                arrPathTypes[0] == dotize.valTypes.array &&\n                Array.isArray(newObj) == false) {\n                newObj = [];\n            }\n\n            (function recurse(rPropVal, rObj, rPropValPrev, rObjPrev) {\n                var currentPath = arrPath.shift();\n                var currentPathType = arrPathTypes.shift();\n\n                if (typeof currentPath == \"undefined\" || currentPath == \"\") {\n                    newObj = rPropVal;\n                    return;\n                }\n\n                var currentPath = dotize.isNumber(currentPath) ? parseInt(currentPath) : currentPath;\n\n                // has multiple levels\n                if (arrPath.length > 0) {\n                    var nextPathTypeIsArray = arrPathTypes[0] == dotize.valTypes.array;\n                    // is not assigned before\n                    if (typeof rObj[currentPath] == \"undefined\") {\n                        if (nextPathTypeIsArray) {\n                            rObj[currentPath] = [];\n                        } else {\n                            rObj[currentPath] = {};\n                        }\n                    }\n\n                    recurse(rPropVal, rObj[currentPath], currentPath, rObj);\n                    return;\n                }\n\n                if (currentPathType == dotize.valTypes.array && rPropValPrev && rObjPrev) {\n                    if (Array.isArray(rObjPrev[rPropValPrev]) == false)\n                        rObjPrev[rPropValPrev] = [];\n                    rObjPrev[rPropValPrev].push(rPropVal);\n                } else {\n                    rObj[currentPath] = rPropVal;\n                }\n            }(tPropVal, newObj));\n        }\n\n        return newObj;\n    }\n}\n\nexport default dotize;"],"names":["dotize","valTypes","none","primitive","object","array","getValType","val","Array","isArray","getPathType","arrPath","arrPathTypes","path","pathVal","isNumber","push","isUndefined","obj","f","isNaN","parseInt","isEmptyObj","prop","Object","hasOwnProperty","call","JSON","stringify","isNotObject","isEmptyArray","arr","length","isNotArray","removeEmptyArrayItem","filter","el","getFieldName","field","prefix","isRoot","isArrayItem","startsWith","valToSearch","indexOf","convert","newObj","recurse","o","p","currentProp","backward","arStartRegex","tProp","tPropVal","prefixRegex","RegExp","replace","split","rPropVal","rObj","rPropValPrev","rObjPrev","currentPath","shift","currentPathType"],"mappings":"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"}